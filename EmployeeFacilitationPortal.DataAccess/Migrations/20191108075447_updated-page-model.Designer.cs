// <auto-generated />
using System;
using EmployeeFacilitationPortal.DataRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EmployeeFacilitationPortal.DataRepository.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20191108075447_updated-page-model")]
    partial class updatedpagemodel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.BasicInfoAttachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentContents");

                    b.Property<string>("DocumentTitle");

                    b.Property<int>("EmployeeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AllAttachments");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.CandidateReferred", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Relationship")
                        .HasMaxLength(50);

                    b.Property<string>("Resume");

                    b.Property<float>("YearsOfExperience");

                    b.HasKey("Id");

                    b.ToTable("CandidatesReferred");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertificateName");

                    b.Property<string>("CertificateScannedCopy");

                    b.Property<string>("CertificationLink");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("EmployeeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasMaxLength(30);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<string>("SupportingDocument");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.CompanyInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("FilePath");

                    b.Property<string>("FileType");

                    b.Property<string>("Filename");

                    b.Property<bool>("IsActive");

                    b.Property<string>("WhatsNew");

                    b.HasKey("Id");

                    b.ToTable("CompanyInformation");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Dependent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cnic")
                        .HasMaxLength(15);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Relationship")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Dependents");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.EducationalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Degree")
                        .HasMaxLength(100);

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<float>("Grade");

                    b.Property<string>("InstitutionName")
                        .HasMaxLength(100);

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Study")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EducationalRecords");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateOfJoining");

                    b.Property<string>("Designation")
                        .HasMaxLength(100);

                    b.Property<int>("EmpId");

                    b.Property<string>("EmployeeTechnicalSkills");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsValidated");

                    b.Property<int?>("LoginId");

                    b.Property<string>("MisconductInPreviousJob");

                    b.Property<string>("ProjectAssigned")
                        .HasMaxLength(200);

                    b.Property<string>("RelativeWorkingInCiklum");

                    b.Property<int>("RoleId");

                    b.Property<string>("SpecialArrangementsRequired");

                    b.Property<string>("Terminated")
                        .HasMaxLength(200);

                    b.Property<string>("TrainingDuringEducation");

                    b.Property<string>("Username")
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.HasIndex("LoginId");

                    b.HasIndex("RoleId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.EmployeeCandidateReferred", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateReferredId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("EmployeeId");

                    b.HasKey("Id");

                    b.HasIndex("CandidateReferredId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeCandidatesReferred");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.EmployeeTechnicalSkills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("TechnicalSkillId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TechnicalSkillId");

                    b.ToTable("EmployeeTechnicalSkills");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.FieldPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("FieldName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsAllowed");

                    b.Property<int>("PageId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("FieldPermissions");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.ForgotEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("EmailId");

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("Link")
                        .HasMaxLength(2048);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ForgotEmail");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Grievance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("EmployeeName");

                    b.Property<string>("GrievanceTitle");

                    b.Property<string>("Status");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Grievances");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.GrievanceMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GrievanceId");

                    b.Property<string>("Message");

                    b.Property<string>("Sender");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("GrievanceId");

                    b.ToTable("GrievanceMessage");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.GrievanceTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedTo");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("GrievanceType");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.LanguageSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("Language");

                    b.Property<string>("ProficiencyLevel");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("LanguageSkills");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Letter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasMaxLength(30);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("Reason")
                        .HasMaxLength(100);

                    b.Property<string>("Response")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Letters");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.LetterRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("EmployeeName");

                    b.Property<string>("Information");

                    b.Property<int>("LetterTypeId");

                    b.Property<string>("Status");

                    b.Property<string>("Urgency");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LetterTypeId");

                    b.ToTable("LetterRequest");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.LetterTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("LetterType");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message");

                    b.Property<string>("StackTrace");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<byte[]>("EncryptedPassword");

                    b.HasKey("Id");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("PageUrl");

                    b.HasKey("Id");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.PagePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("IsAllowed");

                    b.Property<int>("PageId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("PagePermissions");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.PersonalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BloodGroup")
                        .HasMaxLength(3);

                    b.Property<string>("Cnic")
                        .HasMaxLength(15);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Disability")
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<string>("EmergencyContactNumber")
                        .HasMaxLength(15);

                    b.Property<string>("EmergencyContactPerson")
                        .HasMaxLength(100);

                    b.Property<int>("EmployeeId");

                    b.Property<string>("FatherName")
                        .HasMaxLength(100);

                    b.Property<string>("FullName")
                        .HasMaxLength(100);

                    b.Property<string>("Gender")
                        .HasMaxLength(15);

                    b.Property<string>("HusbandName")
                        .HasMaxLength(100);

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(20);

                    b.Property<string>("Ntn")
                        .HasMaxLength(20);

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(10);

                    b.Property<DateTime>("PassportValidityDate");

                    b.Property<string>("PermanentAddress")
                        .HasMaxLength(400);

                    b.Property<string>("PersonalContactNumber")
                        .HasMaxLength(15);

                    b.Property<string>("Picture");

                    b.Property<string>("PresentAddress")
                        .HasMaxLength(400);

                    b.Property<string>("Relative")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("PersonalInfos");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.ProfessionalReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(15);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Designation")
                        .HasMaxLength(100);

                    b.Property<string>("EmailId")
                        .HasMaxLength(255);

                    b.Property<int>("EmployeeId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(100);

                    b.Property<string>("Relationship")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ProfessionalReferences");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Query", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<int>("EmployeeId");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.QueryResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<int?>("QueryId");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("QueryId");

                    b.ToTable("QueryResponse");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.ReferredTechnicalSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateReferredId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("TechnicalSkillId");

                    b.HasKey("Id");

                    b.HasIndex("CandidateReferredId");

                    b.HasIndex("TechnicalSkillId");

                    b.ToTable("ReferredTechnicalSkills");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.TechnicalSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TechnicalSkills");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.TrainingRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BussinessJustification");

                    b.Property<int>("Cost");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("DeliveryType");

                    b.Property<string>("Detail");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<int>("TrainingRequestTypeId");

                    b.Property<string>("TrainingRequestTypeTitle");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TrainingRequests");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.TrainingRequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("TrainingRequestTypes");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.WorkHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Benefit")
                        .HasMaxLength(100);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Designation")
                        .HasMaxLength(100);

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("LastDrawnSalary");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(100);

                    b.Property<string>("ProjectDescriptionAndResponsibilities");

                    b.Property<string>("ReasonForLeaving")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("ToolsAndTechnologies")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkHistories");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.PasswordReset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("ExpiryInDays");

                    b.Property<bool>("IsAlreadyRegistered");

                    b.Property<string>("Password");

                    b.Property<bool>("PasswordSetStatus");

                    b.Property<string>("UserEmail");

                    b.HasKey("Id");

                    b.ToTable("PasswordResets");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.BasicInfoAttachments", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Employee")
                        .WithMany("AllAttachments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Certification", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Employee")
                        .WithMany("Certifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Claim", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Employee")
                        .WithMany("Claims")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Dependent", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Employee")
                        .WithMany("Dependents")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.EducationalRecord", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Employee")
                        .WithMany("EducationalRecords")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Employee", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Login", "Login")
                        .WithMany()
                        .HasForeignKey("LoginId");

                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.EmployeeCandidateReferred", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.CandidateReferred", "CandidateReferred")
                        .WithMany("EmployeeCandidatesReferred")
                        .HasForeignKey("CandidateReferredId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Employee")
                        .WithMany("EmployeeCandidatesReferred")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.EmployeeTechnicalSkills", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.TechnicalSkill", "TechnicalSkill")
                        .WithMany("EmployeeTechnicalSkills")
                        .HasForeignKey("TechnicalSkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.FieldPermission", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Role")
                        .WithMany("FieldPermission_List")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.ForgotEmail", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Employee")
                        .WithMany("ForgotEmails")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Grievance", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Employee")
                        .WithMany("Grievances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.GrievanceMessage", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Grievance")
                        .WithMany("Messages")
                        .HasForeignKey("GrievanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.LanguageSkill", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Employee")
                        .WithMany("LanguageSkills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Letter", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Employee")
                        .WithMany("Letters")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.LetterRequests", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.LetterTypes", "LetterType")
                        .WithMany()
                        .HasForeignKey("LetterTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.PagePermission", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Role")
                        .WithMany("PagePermission_List")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.PersonalInfo", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Employee")
                        .WithOne("PersonalInfo")
                        .HasForeignKey("EmployeeFacilitationPortal.Entities.Models.PersonalInfo", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.ProfessionalReference", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Employee")
                        .WithMany("ProfessionalReferences")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.Query", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Employee", "Employee")
                        .WithMany("Queries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.QueryResponse", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Query", "Query")
                        .WithMany("QueryResponses")
                        .HasForeignKey("QueryId");
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.ReferredTechnicalSkill", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.CandidateReferred", "CandidateReferred")
                        .WithMany("ReferredTechnicalSkills")
                        .HasForeignKey("CandidateReferredId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.TechnicalSkill", "TechnicalSkill")
                        .WithMany("ReferredTechnicalSkills")
                        .HasForeignKey("TechnicalSkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.TrainingRequest", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Employee")
                        .WithMany("TrainingRequests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeFacilitationPortal.Entities.Models.WorkHistory", b =>
                {
                    b.HasOne("EmployeeFacilitationPortal.Entities.Models.Employee")
                        .WithMany("WorkHistories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
